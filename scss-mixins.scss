/* -------------------------------------------------------------
  Scss Useful Mixins Library! 
  By: Carlos March, http://www.carlosmarch.es, @carlosmarch__
  List of Scss Mixins File to be @imported and @included
------------------------------------------------------------- */

/// Adds a browser prefix to the property
/// @param {*} $property Property
/// @param {*} $value Value
/// Usage @include css3-prefix(transition, all 0.2s ease-in);

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
   -khtml-#{$property}: #{$value};
     -moz-#{$property}: #{$value};
      -ms-#{$property}: #{$value};
       -o-#{$property}: #{$value};
          #{$property}: #{$value};
}



/// Adds a transition cross-browser
/// @param {Property} $property [all 0.2s ease-in] - Property Time Ease
/// @require {mixin} css3-prefix
/// Usage @include transition(all 0.2s ease-in)

@mixin transition($property) {
  @include css3-prefix('transition', $property );
}



/// Set a rem font size with pixel fallback
/// @param {Size} $size [14px] - Size
/// Usage @include font-size(14px);

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}
@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}



/// Rounded corners
/// @param {Radius} $radius [4px 4px 4px 4px] - Top-Left Top-Right Bottom-Right Bottom-Left
/// @require {mixin} css3-prefix
/// Usage @include rounded-corners($corners: 4px 4px 4px 4px);

@mixin rounded-corners ($radius: 0 0 0 0) {
  $top-left: nth($corners, 1);
  $top-right: nth($corners, 2);
  $bottom-right: nth($corners, 3);
  $bottom-left: nth($corners, 4);
  
  @include css3-prefix('border-top-left-radius',$top-left );
  @include css3-prefix('border-top-right-radius',$top-right );
  @include css3-prefix('border-bottom-right-radius',$bottom-right );
  @include css3-prefix('border-bottom-left-radius',$bottom-left );
}


/// Buttons
/// @param {Color} $color [#333] - Color
/// Usage @include button(#333);

@mixin button($color) {
	background-color: $color;
	border: 1px solid mix(black, $color, 2%);
	border-radius: 15px;
	padding: .25em .5em;
	
	&:hover {
		cursor: pointer;
		background-color: mix(black, $color, 10%);
		border-color: mix(black, $color, 14%);
	}
}



/// Generates a css class from every element in nested list
/// @param {Property Value} [blue #00CAFF] - Name Color

$colors : blue #00CAFF, deepblue #445D95;

@each $color in $colors {
  $name : nth($color, 1);
  $hex : nth($color, 2);
  .cl-#{$name}{ color: $hex;}
  .cl-#{$name}-dark{ color: darken($hex, 20%);}
  .bg-#{$name}{background: $hex;}
  .bg-#{$name}-dark{background: darken($hex, 20%);}
  .button-#{$name} {@include button($hex);}
}



/// Breakpoints
/// @param {Point} [large] - large / medium / small
/// Usage @include breakpoint(small) { width: 95%; }

@mixin breakpoint($point) {
  @if $point == large {
    @media (min-width: 64.375em) { @content; }
  }
  @else if $point == medium {
    @media (min-width: 50em) { @content; }
  }
  @else if $point == small {
    @media (min-width: 37.5em)  { @content; }
  }
}



/// Clearfix
/// Usage @include clearfix();

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}



/// Text Truncate
/// Usage @extend %text-truncate;

%text-truncate {
 text-overflow: ellipsis;
 vertical-align: top;
 white-space: nowrap;
 overflow: hidden;
 display: inline-block;
}



/// Long Shadow XD
/// @param {color} [rgba(0, 0, 0, 0.4)] - Color
/// @param {largeness} [160] - Largeness
/// Usage @include longshadow(#333, 160);

@function makelongshadow($color, $largeness) {
  $val: 0px 0px $color;
  @for $i from 1 through $largeness {
    $val: #{$val}, #{$i}px #{$i}px #{$color};
  }
  @return $val;
}

@mixin longshadow($color, $largeness) {
  text-shadow: makelongshadow($color, $largeness);
}



/// Center Absolute
/// @param {Position} [position] - Vertical / Horizontal / Both
/// Usage @include abs-center(both);

@mixin abs-center($position) {
  position: absolute;

  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }

  @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  }

  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }

}




/// Block Element
/// @access public
/// @param {String} $element - Element's name
@mixin element($element) {
    &__#{$element} {
        @content;
    }
}

/// Block Modifier
/// @access public
/// @param {String} $modifier - Modifier's name
@mixin modifier($modifier) {
    &--#{$modifier} {
        @content;
    }
}

/// UsageDEMO @include element('element');
.block {
    /* CSS declarations for `.block` */
    @include element('element') {
        /* CSS declarations for `.block__element` */
    }

    @include modifier('modifier') {
        /* CSS declarations for `.block--modifier` */

        @include element('element') {
            /* CSS declarations for `.block--modifier__element` */
        }
    }
}



/// Box Shadow
/// @param {HorizOffset} [0px] - Horizontal Offset
/// @param {VertOffset} [0px] - Vertical Offset
/// @param {Blur} [0px] - Blur
/// @param {Color} [#333] - Color
/// @require {mixin} css3-prefix
/// Usage @include box-shadow(0px 0px 0px #333)

@mixin box-shadow($horizOffset, $vertOffset, $blur, $color) {
    @include css3-prefix('box-shadow', $horizOffset $vertOffset $blur $color );
    border-collapse: separate;
}



